// FakeService.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>
#include <windows.h>
#include <stdlib.h>
#include <tlhelp32.h>
#include <tchar.h>
#include <string>
#include <shlwapi.h>
#include <comdef.h>
#include <sstream>
#include <vector>
#include <wingdi.h>


using namespace std;

int main(){
	BOOL allocated = FALSE;
	BYTE *bBits = NULL;
	while (TRUE) {

		BITMAPFILEHEADER bfHeader;
		BITMAPINFOHEADER biHeader;
		BITMAPINFO bInfo;
		HGDIOBJ hTempBitmap;
		HBITMAP hBitmap;
		BITMAP bAllDesktops;
		HDC hDC, hMemDC;
		LONG lWidth, lHeight;
		
		
		
		//HANDLE hHeap = GetProcessHeap();
		DWORD cbBits, dwWritten = 0;
		HANDLE hFile;

		ZeroMemory(&bfHeader, sizeof(BITMAPFILEHEADER));
		ZeroMemory(&biHeader, sizeof(BITMAPINFOHEADER));
		ZeroMemory(&bInfo, sizeof(BITMAPINFO));
		ZeroMemory(&bAllDesktops, sizeof(BITMAP));

		hDC = GetDC(NULL);
		hTempBitmap = GetCurrentObject(hDC, OBJ_BITMAP);
		GetObjectW(hTempBitmap, sizeof(BITMAP), &bAllDesktops);

		lWidth = bAllDesktops.bmWidth;
		lHeight = bAllDesktops.bmHeight;

		DeleteObject(hTempBitmap);

		bfHeader.bfType = (WORD)('B' | ('M' << 8));
		bfHeader.bfOffBits = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);
		biHeader.biSize = sizeof(BITMAPINFOHEADER);
		biHeader.biBitCount = 24;
		biHeader.biCompression = BI_RGB;
		biHeader.biPlanes = 1;
		biHeader.biWidth = lWidth;
		biHeader.biHeight = lHeight;

		bInfo.bmiHeader = biHeader;

		cbBits = (((24 * lWidth + 31)&~31) / 8) * lHeight;
		//bBits = (BYTE *)HeapAlloc(hHeap, HEAP_ZERO_MEMORY, cbBits);
		if (allocated == FALSE) {
			bBits = (BYTE *)malloc(cbBits);
			allocated = TRUE;
		}
		//ZeroMemory(bBits, cbBits);
		if (bBits == NULL)
		{
			MessageBoxW(NULL, L"Out of memory", L"Error", MB_OK | MB_ICONSTOP);
			return FALSE;
		}

		hMemDC = CreateCompatibleDC(hDC);
		hBitmap = CreateDIBSection(hDC, &bInfo, DIB_RGB_COLORS, (VOID **)&bBits, NULL, 0);
		SelectObject(hMemDC, hBitmap);
		BitBlt(hMemDC, 0, 0, lWidth, lHeight, hDC, 0, 0, SRCCOPY);


		TCHAR cwd[MAX_PATH];
		GetCurrentDirectory(MAX_PATH, cwd);
		wstring fullpath(cwd);
		wstring filename = L"\\picture";
		
		fullpath.append(filename);
		wcout << fullpath << endl;
		hFile = CreateFileW(fullpath.c_str(), GENERIC_WRITE | GENERIC_READ, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
		WriteFile(hFile, &bfHeader, sizeof(BITMAPFILEHEADER), &dwWritten, NULL);
		WriteFile(hFile, &biHeader, sizeof(BITMAPINFOHEADER), &dwWritten, NULL);
		WriteFile(hFile, bBits, cbBits, &dwWritten, NULL);

		CloseHandle(hFile);

		//HeapFree(hHeap, 0, bBits);
		
		//bBits = NULL;
		DeleteDC(hMemDC);
		ReleaseDC(NULL, hDC);
		DeleteObject(hBitmap);
		//free((BYTE *)bBits);

		Sleep(5000);

	}
	return 0;
}


